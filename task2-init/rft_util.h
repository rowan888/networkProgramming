/******** DO NOT EDIT THIS FILE ********/
#ifndef _RFT_H
#define _RFT_H
#include <stdbool.h>
#include <unistd.h>

#define MAX_FILENAME_SIZE 56    // max size of a file name (length is 55)
#define PAYLOAD_SIZE 36         // size of file payload buffer to send in 
                                // each segment (36 bytes, length of string: 35)
#define PORT_MIN 1025           // minimum network port number to use
#define PORT_MAX 65535          // maximum network port number to use

/* metadata to send to prepare for a file transfer */
typedef struct metadata {
    off_t size;                     // size of the file to send
    char name[MAX_FILENAME_SIZE];   // name of the file to create on server
} metadata_t;

/* file transfer segment types */
typedef enum {
  DATA_SEG,                     // data segment
  ACK_SEG                       // ack segment
} seg_type;

/* 
 * segment definition for the client to transfer a payload of data to 
 * the server or for the server to resond with an ACK - the type determines
 * which segment it is
 */
typedef struct segment {
    int sq;                     // sequence number of segment
    seg_type type;              // segment type
    int checksum;               // checksum of payload
    ssize_t file_data;          // bytes of file data (not incl. '\0')
    char payload[PAYLOAD_SIZE]; // payload data read from file
} segment_t;

/*
 * checksum - calculate a checksum from a segment's payload data
 *
 * Parameters:
 * payload - a pointer to the payload
 * is_corrupted - a flag to indicate whether the checksum should be corrupted
 *      to simulate a network error (may be set to true for the RFT protocol
 *      with positive acknowledgement and retransmission)
 *
 * Return:
 * An integer value calculated from the payload of a segment
 */
int checksum(char* payload, bool is_corrupted);

#endif